process
real	4m42.881s
user	15m23.050s
sys	0m0.816s

thread
real	20m51.375s
user	21m28.237s
sys	3m23.509s

plain-way
real	14m39.412s
user	14m39.075s
sys	0m0.008s


        

import threading
class Thread(threading.Thread):
    def __init__(self,threadID, rateList,statDict, lock):
        super(Thread,self).__init__();
        self.threadID = threadID
        self.rateList = rateList

        self.lock = lock
        self.statDict = statDict
    def run(self):
        for rate in self.rateList:
            print rate
            test =\
                DifferentInjectRateTest(injectRate=rate,linkRate=1,maxStep=gobalMaxStep)
            test.run()

            self.lock.acquire()
            self.statDict[rate] = test.getStaticsInfo()
            self.lock.release()


def mainThreadCtrl(rateList,threadNum):
    statDict = {}
    lock = threading.Lock()


    step = int(round(len(rateList) / float(threadNum)))
    for i in range(0,len(rateList),step):
        print len(rateList[i:i+step])

    threads = [Thread(i,rateList[i:i+step],statDict,lock) for i in range(0,len(rateList),step)]
    for thread in threads:
        thread.start()

    for thread in threads:
        thread.join()

    print statDict
    #py.plot(rateList, [statDict[key]['aveDelay'] for key in rateList])
    #py.show()
